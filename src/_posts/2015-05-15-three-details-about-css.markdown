---
layout: post
title:  "编写css需注意的三个细节"
date:   2015-05-15 15:26:12 +0800
categories: css
---
> 编写css源码也有一段时间了，大都过于随意；但是随着接触的css源码的量越大，涉及的页面模块越多，之前不愿意关注的许许多多的细节又要重新进入自己的思考视野。

### 强调复用，不要陷入css“黑洞”

每遇到一个新需求（或者设计师提供新页面），前端开发者在编写css时第一要考虑的是否可以直接使用现有的css样式集（或者对现有的样式集进行优化以满足需求），而不建议重新引入新的css源码。

样式应该是慢慢迭代的，如果在开发过程中不断引入新的css类且当css类的数目扩充到万级别的时候，大都会陷入这样的痛苦中——旧的css怎么办？大部分相关的涉及到的页面或都迭代更新了，或都沦为“僵尸”页面，用户无法直接访问，或干脆前端模块都已经清理掉了？

好吧，这块css源码也要清理掉。但哪些旧css源码需要清理呢？你不得不`git grep`页面模板来确认。真正的问题在于前端工程师写了一大堆的css源码最后都是要被清理的，不能做出很好的开发积累。所以，熟悉已有的css样式集，开发时擅长基于已有的css样式集慢慢迭代是编写css的的好习惯。典型的一些css开源框架如[pure](http://purecss.io/)，[Bootstrap](http://getbootstrap.com/)等就很出色，基于已有的样式进行开发，就会避免css“黑洞”——不要让之前开发的css源码浪费掉。

### 重视ID选择器和class选择器，远离tag（标签）选择器

通常容易看到类似如下的一段源码：

```css
.wrapper-content .items li {
    ...
}
```

这段源码的槽点在于使用了元素选择器。浏览器在剖析css选择器时是**从右往左**的。以上面的源码为例，具体的过程是先在整个HTML标签树中找到所有的`li`标签集合，然后再在找到`li`标签集合中筛选出其父标签class属性包含为`items`的标签集合，然后再基于从筛选的标签集合中继续筛选父标签的class属性为`wrapper-content`的标签集合。

换言之，css样式解析过程其实就是从一个个集合中慢慢筛选出符合要求的元素的过程。其中，我们可以从两个方面来进行优化：

1.降低集合域。特别是HTML中的`<div>`，`<p>`等占比大的标签，或者说不要在css源码中出现任何的元素选择器。

2.减少筛选过程。css解析是从一个集合中筛选出子集合，然后继续筛选子集合直到没有了其它的筛选条件为止，所以css的嵌套层级要尽量短。

特别是sass这类css预处理语言很容易写出嵌套很深的css源码。如scss源码检查工具[scss-lint]()就存在这`SelectorDepth` & `NestingDepth`两个检查项来避免css源码的嵌套层级过深。

降低浏览器对css源码解析的计算量，会加快页面渲染速度。特别是当针对首页进行性能优化达到瓶颈时，降低css的计算量往往也能取得意想不到的效果。

### 属性值中涉及到的images,fonts等外部资源需统一管理

css属性中通常也会涉及到一些外部资源：如图标，字体资源等。
具体的web页面图标使用策略详细分析见*[web頁面上的那些圖標](http://ocaml.juyipeng.net/i/#/Tech/offal/web页面上的那些图标.md)*。具体要讲究的是这些css源码之外的资源管理需实现模块化统一管理。

最典型的使用策略是web-font的应用。在实际使用的过程中，一般按照如下的模式（[Font-Awesome](http://fortawesome.github.io/Font-Awesome/)）：

```html
<i class="fa fa-camera-retro fa-2x"></i>
```

首先，使用`fa`来获取资源（或者说提供资源的完整信息），然后通过`fa-camera-retro`来选择资源我们需要的那一部分，最后通过`fa-2x`来对我们需要的那一部分进行特性优化（如大小等）。

同样的策略也可以应用在Sprite图中，类似源码如下：

```html
<i class="sp-login sp-login-user"></i>
```

使用`sp-login`表示我们要使用的是一张名为`sp-login`的Sprite图（通常仅提供这张Sprite图的资源路径），通过`sp-login-user`来选择这张大Sprite图表示用户的那个部分（一般提供position属性相关的坐标值）。这样的好处就是将Sprite图的应用与具体的CSS源码实现解耦，复用性更强。

简单来说，css源码中不应该涉及引用外部资源如图标，字体等；如果要使用应该采用一些方式实现统一管理，降低偶合度。

这样无论是资源复用，代码升级都会方便很多，减少了不必要的维护成本。

### 总结

- 强调复用，不要陷入css“黑洞”
- 重视ID选择器和class选择器，远离tag（标签）选择器
- 属性值中涉及到的images,fonts等外部资源需统一管理

